version: '3.3'
services:
  prometheus:
    image: prom/prometheus:v2.12.0
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    expose:
      - 9090
    networks:
      - monitor-net
      - spring-cloud-network 
    labels:
      org.label-schema.group: "monitoring"

  alertmanager:
    image: prom/alertmanager:v0.18.0
    container_name: alertmanager
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    expose:
      - 9093
    networks:
      - monitor-net
      - spring-cloud-network
    labels:
      org.label-schema.group: "monitoring"

  nodeexporter:
    image: prom/node-exporter:v0.18.1
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    networks:
      - monitor-net
      - spring-cloud-network
    labels:
      org.label-schema.group: "monitoring"

  cadvisor:
    image: google/cadvisor:v0.33.0
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      #- /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - monitor-net
      - spring-cloud-network
    labels:
      org.label-schema.group: "monitoring"

  grafana:
    image: grafana/grafana:6.3.5
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/datasources:/etc/grafana/datasources
      - ./grafana/dashboards:/etc/grafana/dashboards
      - ./grafana/setup.sh:/setup.sh
    entrypoint: /setup.sh
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    expose:
      - 3000
    networks:
      - monitor-net
      - spring-cloud-network
    labels:
      org.label-schema.group: "monitoring"

  pushgateway:
    image: prom/pushgateway:v0.9.1
    container_name: pushgateway
    restart: unless-stopped
    expose:
      - 9091
    networks:
      - monitor-net
      - spring-cloud-network
    labels:
      org.label-schema.group: "monitoring"

  caddy:
    image: stefanprodan/caddy
    container_name: caddy
    ports:
      - "3000:3000"
      - "9090:9090"
      - "9093:9093"
      - "9091:9091"
    volumes:
      - ./caddy/:/etc/caddy/
    environment:
      - ADMIN_USER=${ADMIN_USER:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
    restart: unless-stopped
    networks:
      - monitor-net
      - spring-cloud-network
    labels:
      org.label-schema.group: "monitoring"
  config-server:
    container_name: config-server
    build:
        context: config-service/.
        dockerfile: Dockerfile
    image: config-server:latest
    expose:
        - 8088
    networks:
        - spring-cloud-network
    #volumes:
    #    - spring-cloud-config-repo:/var/lib/spring-cloud/config-repo
    logging:
        driver: json-file
    # reservations:
    #     mem_limit: 300m
    #     mem_reservation: 100m
    deploy:
        resources:
            limits:
                cpus: '0.010'
                memory: 100M
            reservations:
                cpus: '0.0001'
                memory: 30M
  discovery-service:
    container_name: discovery-service
    build:
      context: discovery-service/.
      dockerfile: Dockerfile
    image: discovery-service:latest
    entrypoint: /app/entrypoint.sh
    environment:
      SPRING_APPLICATION_JSON: '{"spring": {"cloud": {"config": {"uri": "http://config-server:8088"}}}}'
      JAVA_OPTS: "-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=1"
    expose:
        - 8061
    ports:
        - 8061:8061
    networks:
        - spring-cloud-network
    links:
        - config-server:config-server
    depends_on:
        - config-server
    logging:
        driver: json-file
    deploy:
      resources:
        limits:
          cpus: '0.010'
          memory: 100M
        reservations:
          cpus: '0.0001'
          memory: 30M

  proxy-service:
    container_name: proxy-service
    build:
        context: proxy-service/.
        dockerfile: Dockerfile
    image: proxy-service:latest
    entrypoint: /app/entrypoint.sh
    environment:
        SPRING_APPLICATION_JSON: '{"spring": {"cloud": {"config": {"uri": "http://config-server:8088"}}}}'
    expose:
        - 8060
    ports:
        - 8060:8060
    networks:
        - spring-cloud-network
        
    links:
        - config-server:config-server
        - discovery-service:discovery-service
    depends_on:
        - config-server
        - discovery-service
    logging:
        driver: json-file
          
  user-service:
    container_name: user-service
    build:
        context: user-service/.
        dockerfile: Dockerfile
    image: user-service:latest
    entrypoint: /app/entrypoint.sh
    environment:
      SPRING_APPLICATION_JSON: '{"spring": {"cloud": {"config": {"uri": "http://config-server:8088"}}}}'
    expose:
      - 8085
    ports:
      - 8085:8085
    networks:
        - spring-cloud-network
    links:
        - config-server:config-server
        - discovery-service:discovery-service  
    depends_on:
        - config-server
        - discovery-service
    logging:
        driver: json-file
          
  auth-service:
    container_name: auth-service
    build:
      context: auth-service/.
      dockerfile: Dockerfile
    image: auth-service:latest
    entrypoint: /app/entrypoint.sh
    environment:
      SPRING_APPLICATION_JSON: '{"spring": {"cloud": {"config": {"uri": "http://config-server:8088"}}}}'
    expose:
      - 8078
    ports:
      - 8078:8078
    networks:
      - spring-cloud-network
    links:
      - config-server:config-server
      - discovery-service:discovery-service  
    depends_on:
      - config-server
      - discovery-service
    logging:
        driver: json-file
            
  gateway-service-zuul:
    container_name: gateway-service-zuul
    build:
      context: gateway-service-zuul/.
      dockerfile: Dockerfile
    image: gateway-service-zuul:latest
    entrypoint: /app/entrypoint.sh
    environment:
      SPRING_APPLICATION_JSON: '{"spring": {"cloud": {"config": {"uri": "http://config-server:8088"}}}}'
    expose:
      - 8077
    ports:
      - 8077:8077
    networks:
      - spring-cloud-network
    links:
      - config-server:config-server
      - discovery-service:discovery-service  
    depends_on:
      - config-server
      - discovery-service
    logging:
      driver: json-file
            
            
networks:
  spring-cloud-network:
    driver: bridge

  monitor-net:
    driver: bridge
    
    
volumes:
    prometheus_data: {}
    grafana_data: {}    
#volumes:
#    spring-cloud-config-repo:
#        external: true

